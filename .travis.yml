language: cpp

matrix:
  include:
    - os: linux
      name: "GCC7 | Coverage"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - cmake
            - lcov
      env:
        - COMPILER="CC=gcc-7 && CXX=g++-7"
        - BUILD_TYPE=Coverage
      install:
        - eval $COMPILER
        - sudo apt-get remove python-enum34
        - sudo pip install --upgrade pip
        - sudo pip install conan
        - conan user
      after_success:
        - lcov --directory . --capture --output-file coverage.info
        - lcov --remove coverage.info '/usr/*' '*/tests/*' '*/.conan/*' --output-file coverage.info
        - lcov --list coverage.info
        - bash <(curl -s https://codecov.io/bash) -f coverage.info;

    - os: osx
      name: "Apple Clang | Debug"
      osx_image: xcode10.2
      env:
        - BUILD_TYPE=Debug
      install:
        - brew install conan
        - export -n CC && export -n CXX
        - conan user

    - os: linux
      name: "LLVM7 | Release"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libstdc++-7-dev
            - cmake
      env:
        - COMPILER="CC=clang && CXX=clang++"
        - BUILD_TYPE=Release
      install:
        - eval $COMPILER
        - sudo apt-get remove python-enum34
        - sudo pip install --upgrade pip
        - sudo pip install conan
        - conan user

    - os: windows
      name: "MSVC | Release"
      install:
        - choco install conan
        - export PATH=$PATH:"/C/Program Files/Conan/conan"
      script:
        - mkdir out && cd out
        - conan install .. -o build_tests=True
        - cmake -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON ..
        - cmake --build . --config Release
        - cd tests && ctest --output-on-failure

    - os: linux
      name: "LLVM8 | Static Analyze"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - libstdc++-7-dev
            - clang-8
            - clang-tools-8
            - cmake
      env:
        - COMPILER="CC=clang-8 && CXX=clang++-8"
        - BUILD_TYPE=Release
      install:
        - eval $COMPILER
        - sudo apt-get remove python-enum34
        - sudo pip install --upgrade pip
        - sudo pip install conan
        - conan user
      script:
        - mkdir out && cd out
        - conan install .. -o build_tests=True
        - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        - cd ..
        - clang-check-8 -analyze -p out/compile_commands.json tests/*.cpp lib/src/*.cpp lib/src_asio/*.cpp

    - os: linux
      name: "LLVM8 | ASan,LSan,UBSan"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - libstdc++-7-dev
            - clang-8
            - clang-tools-8
            - cmake
      env:
        - COMPILER="CC=clang-8 && CXX=clang++-8"
        - BUILD_TYPE=AUBSan
      install:
        - eval $COMPILER
        - sudo apt-get remove python-enum34
        - sudo pip install --upgrade pip
        - sudo pip install conan
        - conan user
        - ASAN_OPTIONS=detect_stack_use_after_return=1:halt_on_error=false:detect_leaks=1
        - echo $ASAN_OPTIONS

    - os: linux
      name: "LLVM8 | MSan"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - libstdc++-7-dev
            - clang-8
            - clang-tools-8
            - cmake
            - subversion
      env:
        - COMPILER="CC=clang-8 && CXX=clang++-8"
        - BUILD_TYPE=MSan
      install:
        - eval $COMPILER
        - sudo apt-get remove python-enum34
        - sudo pip install --upgrade pip
        - sudo pip install conan
        - conan user
        - git clone https://github.com/rukkal/libcxx-msan.git
        - cd libcxx-msan
        - ./build.sh &>/dev/null
        - source load-environment && cd ..
        - AUX_CMAKE_FLAGS='-DCMAKE_CXX_FLAGS=-stdlib=libc++ -fsanitize=memory'

    - os: linux
      name: "LLVM8 | TSan"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - libstdc++-7-dev
            - clang-8
            - clang-tools-8
            - cmake
      env:
        - COMPILER="CC=clang-8 && CXX=clang++-8"
        - BUILD_TYPE=TSan
      install:
        - eval $COMPILER
        - sudo apt-get remove python-enum34
        - sudo pip install --upgrade pip
        - sudo pip install conan
        - conan user

    - stage: check
      os:  linux
      name: "LLVM8 | Tidy"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-xenial-8
          packages:
            - libstdc++-7-dev
            - clang-tidy-8
            - expect-dev
            - cmake
      env:
        - COMPILER="CC=clang-8 && CXX=clang++-8"
        - BUILD_TYPE=Debug
      install:
        - eval $COMPILER
        - sudo apt-get remove python-enum34
        - sudo pip install --upgrade pip
        - sudo pip install conan
        - conan user
      script:
        - mkdir out && cd out
        - conan install .. -o build_tests=True
        - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE "$AUX_CMAKE_FLAGS"  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        - cd ..
        - unbuffer clang-tidy-8 -p out $(find lib/ -name *.cpp) | tee tidy.out
        - bash -c 'if [[ $(grep -E "warning:|error:" tidy.out) ]]; then exit 1; else exit 0; fi'

  allow_failures:
    - os: windows

stages:
  - check
  - test

script:
  - mkdir out && cd out
  - conan install .. -o build_tests=True
  - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE "$AUX_CMAKE_FLAGS" ..
  - cmake --build . -- -j $(nproc)
  - cd tests && ctest --output-on-failure
